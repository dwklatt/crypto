def pulverizer(a, b, q, x1, y1, x2, y2):
    newx1 = x2
    #print(newx1)
    newy1 = y2
    #print(newy1)
    x2 = x1 - q*x2
    #print("x2 is: " + str(x2))
    y2 = y1 - q*y2
    #print("y2 is: " +str(y2))
    
    if b == 1:
        return y2

    q = int(a/b)
    #print(q)
    #a = q*b + r
    r = a - q*b
    if r == 0:
        return y2
    #print(r)
    
    return pulverizer(b, r, q, newx1, newy1, x2, y2)

def point_addition(h1, h2, p):
    x1 = int(h1[0])
    y1 = int(h1[1])
    x2 = int(h2[0])
    y2 = int(h2[1])
    topm = (y2 - y1)
    botm = (x2 - x1)
    botm = pulverizer(botm, p, 0, 0, 1, 0, 0)
    m = (topm * botm) % p
    x3 = (m ** 2) - (x1 + x2)
    x3 = x3 % p
    y3 = y1 + m*(x3 - x1)
    y3 = -y3 % p
    new_point = []
    new_point.append(x3)
    new_point.append(y3)
    return new_point

def point_mult(x, N, p):
    if N==1:
        return x
    elif N%2==0:
        x = point_addition(x,x,p)
        N = N/2
        return point_mult(x, N, p)
    else:
        y = point_addition(x,x,p)
        N = (N-1)/2
        return point_addition(x,point_mult(y,N,p),p)

def compute_full_mask(half_mask, N, p):
    #full_mask = half_mask
    #i = 0
    #while i < N:
    #    full_mask = point_addition(full_mask, half_mask, p)
    #    i = i + 1

    return point_mult(half_mask, N, p)

def compute_message(cipher, full_mask, p):
    message = point_addition(cipher, full_mask, p)
    return message

def decrypt(N, p):
    decrypted_message = []
    half_mask = []
    cipher = []
    f = open('encrypted.txt', 'r+')
    for line in f:
        characters = line.split(" ")
        half_mask.append(characters[0])
        half_mask.append(characters[1])
        full_mask = compute_full_mask(half_mask, N, p)
        cipher.append(characters[2])
        cipher.append(characters[3])
        decrypted_message.append(compute_message(cipher, full_mask, p))
        half_mask = []
        cipher = []
    f.close()
    return decrypted_message
    

def main():
    N = 182755680224874988969105090392374859247
    p = 231980187997634794246138521723892165531
    A = 286458106491124997002528249079664631375
    answer = decrypt(N, p)
    print(answer)

if __name__ == '__main__':
    main()
